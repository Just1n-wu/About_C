//  Created by Just1n on 22/14/5.
//  Copyright (c) 2022年 . All rights reserved.
//
// 1. 输入两个正整数 m 和 n， 求其最大公约数和最小公倍数
#include<stdio.h>

int main()
{
	int m, n, temp, result;
	printf("请输入两个正整数（m, n）：");
	scanf("%d,%d", &m, &n);
	result = m * n;
	
	while(m % n)  // 辗转相除来取余
	{
		temp = m % n;
		m = n;
		n = temp;
	}
	
	printf("最大公约数是 %d\n最小公倍数是 %d\n", n, result / n);
	
	return 0;
}


// 2. 水仙花数（要求分别使用一重循环和三重循环实现）
// 153 = 1^3 + 5^3 + 3^3	

#include<stdio.h>

int main()
{
	int g, s, b, i;
	for(i = 100; i < 1000; i++)  // 一重循环
	{
		g = i % 10;          // 个位
		s = i % 100 / 10;    // 十位
		b = i / 100;         // 百位
		
		if(g * g * g + s * s * s + b * b * b
         		== g + 10 * s + 100 * b )
				printf("%d ", i);
	}
	
	putchar('\n');
	
	// 三重循环  那么百位必定不为 0;
	for(g = 0; g <= 9; g++)
		for(s = 0; s <= 9; s++)
			for(b = 1; b <= 9; b++)
				if(g * g * g + s * s * s + b * b * b
         		== g + 10 * s + 100 * b )
				printf("%d%d%d ", b, s, g);

	return 0;
}

// 3. 一个数恰好等于它的平方数的右端，这个数称为同构数。
// 例如 5 ^ 2 = 25, 5 是 25 中右端的数， 5 就是同构数
// 找出 1 —— 1000 之间所有的同构数

#include<stdio.h>

int main()
{
	long int num, k = 10;
	for(num = 1; num <= 1000; num++)
	{
		if(num == k)
			k *= 10;
		
		if((num * num) % k == num)
			printf("%ld ", num);
	}
	
	return 0;
}

// 4. 3025这个数具有一种独特的性质:将它平分为两段，即30和25，使之相加后求平方，
// 即(30+25)，恰好等于3025本身。请求出具有这样性质的全部四位数.

#include<stdio.h>

int main()
{
	int num;
	for(num = 1000; num < 10000; num++)
	{
		if((num / 100 + num % 100) * 
		(num / 100 + num % 100) == num)
		printf("%d ", num);
	}
	
	return 0;
}

/* 5. 两位数13和62具有很有趣的性质:把它们个位数字和十位数字对调，
 其乘积不变, 即 13 * 62 = 31 * 26。
 编程序求共有多少对这种性质的两位数
 (个位与十位相同的不在此列，如11、22，重复出现的不在此列，如13 * 62 与 62 * 13）。*/
 
 #include<stdio.h>
 
 int main()
 {
	int fnum, snum, count = 0;
	for(fnum = 10; fnum < 100; fnum++)	
	{	
		for(snum = 10; snum < 100; snum++)
		{
			if(fnum * snum == (fnum % 10 * 10 + fnum / 10) * (snum % 10 * 10 + snum / 10)
			&& (fnum % 10 != fnum / 10) && (snum % 10 != snum / 10))
			count++;
		}
	}
	printf("共有 %d 对\n", count / 2);  // 去除重复项 fnum 可能会在 snum 中再次出现
	
	return 0;
 }








